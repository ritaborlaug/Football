package Football.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Badge;
  private ConceptPresentation props_Coach;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_Lineup;
  private ConceptPresentation props_Match;
  private ConceptPresentation props_Player;
  private ConceptPresentation props_Team;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Badge:
        if (props_Badge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("badge");
          props_Badge = cpb.create();
        }
        return props_Badge;
      case LanguageConceptSwitch.Coach:
        if (props_Coach == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Coach");
          props_Coach = cpb.create();
        }
        return props_Coach;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Field");
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.Lineup:
        if (props_Lineup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Lineup");
          props_Lineup = cpb.create();
        }
        return props_Lineup;
      case LanguageConceptSwitch.Match:
        if (props_Match == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Match = cpb.create();
        }
        return props_Match;
      case LanguageConceptSwitch.Player:
        if (props_Player == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("player");
          props_Player = cpb.create();
        }
        return props_Player;
      case LanguageConceptSwitch.Team:
        if (props_Team == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Team = cpb.create();
        }
        return props_Team;
    }
    return null;
  }
}
